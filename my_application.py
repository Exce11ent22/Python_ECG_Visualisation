# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_application.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import ecg_tools


class Ui_MainWindow(object):
    file_path = ""

    def setupUi(self, MainWindow):
        MainWindow.setFixedWidth(500)
        MainWindow.setFixedHeight(220)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowTitle("ECG Tools")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(5, 5, 490, 210))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.file_path_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.file_path_label.setObjectName("file_path_label")
        self.verticalLayout.addWidget(self.file_path_label)
        
        self.file_chooser = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.file_chooser.setObjectName("file_chooser")
        self.file_chooser.clicked.connect(self.choose_file)
        self.verticalLayout.addWidget(self.file_chooser)
        
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.one = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.one.setObjectName("one")
        self.one.setChecked(True)
        self.horizontalLayout.addWidget(self.one)
        
        self.two = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.two.setObjectName("two")
        self.horizontalLayout.addWidget(self.two)
        
        self.three = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.three.setObjectName("three")
        self.horizontalLayout.addWidget(self.three)
        
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        
        self.show_ecg = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.show_ecg.setObjectName("show_ecg")
        self.show_ecg.clicked.connect(self.ecg)
        self.verticalLayout.addWidget(self.show_ecg)
        
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        self.show_complex = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.show_complex.setObjectName("show_complex")
        self.show_complex.clicked.connect(self.complex)
        self.horizontalLayout_2.addWidget(self.show_complex)
        
        self.choose_complex = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.choose_complex.setObjectName("choose_complex")
        self.horizontalLayout_2.addWidget(self.choose_complex)
        
        self.complex_chooser = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.complex_chooser.setObjectName("complex_chooser")
        self.complex_chooser.setText("5")
        self.horizontalLayout_2.addWidget(self.complex_chooser)
        
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        
        self.coherent_accumulation_method = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.coherent_accumulation_method.setObjectName("coherent_accumulation_method")
        self.coherent_accumulation_method.clicked.connect(self.coherent)
        self.verticalLayout.addWidget(self.coherent_accumulation_method)
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ECG Tools"))
        self.file_path_label.setText(_translate("MainWindow", "Choose the file"))
        self.file_chooser.setText(_translate("MainWindow", "Choose file"))
        self.one.setText(_translate("MainWindow", "I"))
        self.two.setText(_translate("MainWindow", "II"))
        self.three.setText(_translate("MainWindow", "III"))
        self.show_ecg.setText(_translate("MainWindow", "Show ECG"))
        self.show_complex.setText(_translate("MainWindow", "Show complex"))
        self.choose_complex.setText(_translate("MainWindow", "Choose complex"))
        self.coherent_accumulation_method.setText(_translate("MainWindow", "Coherent accumulation method"))

    def choose_file(self):
        self.file_path = QtWidgets.QFileDialog.getOpenFileName(filter="*.crv")[0]
        self.refresh()

    def refresh(self):
        if self.file_path == "":
            self.file_path_label.setText("Выберите файл")
        else:
            self.file_path_label.setText(self.file_path)
        self.file_path_label.adjustSize()

    def ecg(self):
        if self.one.isChecked():
            ecg_tools.show_ecg(1, self.file_path)
        if self.two.isChecked():
            ecg_tools.show_ecg(2, self.file_path)
        if self.three.isChecked():
            ecg_tools.show_ecg(3, self.file_path)


    def complex(self):
        if self.one.isChecked():
            ecg_tools.show_complex(1, self.file_path, self.complex_chooser.text())
        if self.two.isChecked():
            ecg_tools.show_complex(2, self.file_path, self.complex_chooser.text())
        if self.three.isChecked():
            ecg_tools.show_complex(3, self.file_path, self.complex_chooser.text())

    def coherent(self):
        if self.one.isChecked():
            ecg_tools.coherent_accumulation_method(1, self.file_path)
        if self.two.isChecked():
            ecg_tools.coherent_accumulation_method(2, self.file_path)
        if self.three.isChecked():
            ecg_tools.coherent_accumulation_method(3, self.file_path)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
